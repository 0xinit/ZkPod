import React, { useMemo, useState, useEffect } from 'react';
import { useWeb3React } from '@web3-react/core';
import { styled } from '@linaria/react';
import { getWalletInfo, connectorByWallet, chainNametoID, isAuthorized } from '@rainbow-me/kit-utils';
import assert from 'assert';

var img$1 = "data:image/svg+xml,%3csvg width='34' height='34' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle cx='17' cy='17' r='17' fill='url(%23paint0_radial)'/%3e%3cpath d='M11.47 20.407c-.54.54-.568 1.573.027 2.167.595.595 1.627.568 2.167.028l3.33-3.336 3.321 3.329c.575.574 1.58.56 2.167-.028.595-.594.602-1.592.028-2.167l-3.323-3.322 3.323-3.322c.574-.574.567-1.58-.028-2.167-.587-.595-1.592-.602-2.167-.027l-3.322 3.322-3.329-3.33c-.54-.54-1.572-.567-2.167.028-.595.588-.567 1.62-.027 2.16l3.336 3.336-3.336 3.33z' fill='%233C4252' fill-opacity='.8'/%3e%3cdefs%3e%3cradialGradient id='paint0_radial' cx='0' cy='0' r='1' gradientUnits='userSpaceOnUse' gradientTransform='matrix(34 0 0 34.0003 0 17)'%3e%3cstop stop-color='%233C4252' stop-opacity='0'/%3e%3cstop offset='1' stop-color='%233C4252' stop-opacity='.06'/%3e%3c/radialGradient%3e%3c/defs%3e%3c/svg%3e";

var img = "data:image/svg+xml,%3csvg width='22' height='23' viewBox='0 0 22 23' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M11 22.0059C16.8008 22.0059 21.5469 17.2598 21.5469 11.459C21.5469 5.64844 16.8008 0.902344 10.9902 0.902344C5.18945 0.902344 0.443359 5.64844 0.443359 11.459C0.443359 17.2598 5.18945 22.0059 11 22.0059ZM11 18.8223C6.91797 18.8223 3.62695 15.5312 3.62695 11.459C3.62695 7.37695 6.91797 4.08594 10.9902 4.08594C15.0723 4.08594 18.3633 7.37695 18.3633 11.459C18.3633 15.5312 15.0723 18.8223 11 18.8223ZM8.91992 16.1953C9.30078 16.5762 10.1016 16.5664 10.5117 16.1758L14.1738 12.748C14.8965 12.0742 14.8965 10.873 14.1738 10.1992L10.5117 6.78125C10.0527 6.35156 9.37891 6.36133 8.95898 6.75195C8.48047 7.18164 8.48047 7.93359 8.92969 8.36328L12.2695 11.4688L8.92969 14.584C8.49023 15.0039 8.45117 15.7266 8.91992 16.1953Z' fill='%233C4252' fill-opacity='0.6'/%3e%3c/svg%3e";

const Title = /*#__PURE__*/styled("span")({
  name: "Title",
  class: "txw1k92"
});
const ModalOverlay = /*#__PURE__*/styled("div")({
  name: "ModalOverlay",
  class: "mhsyv35",
  vars: {
    "mhsyv35-0": [props => props.$isConnecting ? 'flex' : 'none']
  }
});
const StyledModal = /*#__PURE__*/styled("div")({
  name: "StyledModal",
  class: "s1gicmgf"
});
const Caption = /*#__PURE__*/styled("span")({
  name: "Caption",
  class: "c140sp1v"
});
const CloseButton = /*#__PURE__*/styled("button")({
  name: "CloseButton",
  class: "cduo4q4"
});
const WalletLabel = /*#__PURE__*/styled("span")({
  name: "WalletLabel",
  class: "w1mmf3z0"
});
const WalletList = /*#__PURE__*/styled("ul")({
  name: "WalletList",
  class: "w1qdnujv"
});
const Icon = /*#__PURE__*/styled("img")({
  name: "Icon",
  class: "i68g653"
});
const Terms = /*#__PURE__*/styled("div")({
  name: "Terms",
  class: "tqt7jy7"
});
const MoreWallets = /*#__PURE__*/styled("button")({
  name: "MoreWallets",
  class: "m1j6kbtl"
});
const MoreWalletsGroup = /*#__PURE__*/styled("div")({
  name: "MoreWalletsGroup",
  class: "m10cm13m"
});

const WalletIcon = ({
  wallet,
  connect
}) => {
  const {
    name,
    logoURI
  } = useMemo(() => getWalletInfo(wallet.name), [wallet.name]);
  return React.createElement("li", {
    key: name
  }, React.createElement("button", {
    onClick: () => connect ? connect(wallet) : undefined
  }, React.createElement(WalletLabel, null, React.createElement(Icon, {
    src: logoURI,
    alt: name
  }), name), React.createElement("img", {
    src: img,
    alt: `Select ${name}`
  })));
};

const MoreWalletsIcon = ({
  wallet
}) => {
  const {
    name,
    logoURI
  } = useMemo(() => getWalletInfo(wallet.name), [wallet.name]);
  return React.createElement("div", {
    key: name
  }, React.createElement(Icon, {
    src: logoURI,
    alt: name
  }));
};

const BackButton = /*#__PURE__*/styled("button")({
  name: "BackButton",
  class: "bvisq0a"
});
/**
 * Rainbow-styled Modal
 */

const Modal = ({
  wallets,
  connect,
  setConnecting,
  isConnecting,
  terms,
  classNames
}) => {
  const {
    visibleWallets,
    hiddenWallets
  } = useMemo(() => {
    const visibleWallets = [];
    const hiddenWallets = [];

    for (const wallet of wallets) {
      if (wallet.hidden) {
        hiddenWallets.push(wallet);
      } else visibleWallets.push(wallet);
    }

    return {
      visibleWallets,
      hiddenWallets
    };
  }, [wallets]);
  const [isHiddenWalletsOpened, setHiddenWalletsOpened] = useState(false);
  return React.createElement(ModalOverlay, {
    "$isConnecting": isConnecting,
    className: isConnecting ? `${classNames === null || classNames === void 0 ? void 0 : classNames.overlay}` : `${classNames === null || classNames === void 0 ? void 0 : classNames.hidden}`
  }, React.createElement(StyledModal, {
    className: classNames === null || classNames === void 0 ? void 0 : classNames.modal
  }, React.createElement(CloseButton, {
    className: classNames === null || classNames === void 0 ? void 0 : classNames.close,
    onClick: () => setConnecting(false)
  }, React.createElement("img", {
    src: img$1,
    alt: "close",
    title: "close"
  })), React.createElement("div", null, React.createElement(Title, {
    className: classNames === null || classNames === void 0 ? void 0 : classNames.title
  }, "Connect to a wallet"), React.createElement(Caption, {
    className: classNames === null || classNames === void 0 ? void 0 : classNames.caption
  }, "Choose your preferred wallet"), React.createElement(WalletList, {
    className: classNames === null || classNames === void 0 ? void 0 : classNames.wallets
  }, (isHiddenWalletsOpened ? hiddenWallets : visibleWallets).map(c => {
    return React.createElement(WalletIcon, {
      key: c.name,
      connect: connect,
      wallet: c
    });
  })), hiddenWallets.length && !isHiddenWalletsOpened && React.createElement(MoreWallets, {
    onClick: () => setHiddenWalletsOpened(true)
  }, React.createElement("div", null, React.createElement(MoreWalletsGroup, null, hiddenWallets.map(w => React.createElement(MoreWalletsIcon, {
    wallet: w,
    key: w.name
  }))), React.createElement(WalletLabel, null, "More wallets")), React.createElement("img", {
    src: img,
    alt: "Open more wallets"
  })), isHiddenWalletsOpened && React.createElement(BackButton, {
    onClick: () => setHiddenWalletsOpened(false)
  }, React.createElement(Caption, null, "Back"))), terms && React.createElement(Terms, {
    className: classNames === null || classNames === void 0 ? void 0 : classNames.terms
  }, terms)));
};

/**
 *
 * @param mod in PascalCase
 * @returns
 */
const importConnector = async (mod) => {
    const x = await import(`@web3-react/${mod.toLowerCase()}-connector/dist/${mod.toLowerCase()}-connector.esm.js`);
    return x[`${mod}Connector`];
};
/**
 * Imports and creates a connector with given options
 */
const createConnector = async ({ name, options, chains, connectorName }) => {
    connectorName = connectorName || connectorByWallet(name);
    assert.notEqual(connectorName, undefined, `Could not find connector for ${name}`);
    const Connector = await importConnector(connectorName);
    const instance = new Connector({
        ...options,
        supportedChainIds: chains === null || chains === void 0 ? void 0 : chains.map((chain) => (typeof chain === 'string' ? chainNametoID(chain) : chain))
    });
    return { instance, name };
};

const useWalletModal = ({ modal: ModalComponent, chains = [], wallets: selectedWallets, terms }) => {
    const { activate, deactivate, library: provider, active: isConnected, account: address, ...web3ReactProps } = useWeb3React();
    const wallets = selectedWallets.map((w) => {
        if (typeof w === 'string') {
            switch (w) {
                case 'metamask':
                    return {
                        name: w,
                        hidden: false,
                        options: {},
                        iconUrl: '/icons/rainbow.png'
                    };
                default:
                    return {
                        name: w,
                        hidden: false,
                        options: {}
                    };
            }
        }
        return w;
    });
    const connectToWallet = async (name) => {
        var _a;
        const options = ((_a = wallets.find((w) => w.name === name)) === null || _a === void 0 ? void 0 : _a.options) || {};
        const { instance } = await createConnector({ name: name, chains, options });
        await activate(instance);
    };
    useEffect(() => {
        const walletName = localStorage.getItem('rk-last-wallet');
        if (walletName && !isConnected && window.ethereum && selectedWallets.includes(walletName)) {
            isAuthorized().then((yes) => {
                if (yes)
                    connectToWallet(walletName);
            });
        }
    }, []);
    const [isConnecting, setConnecting] = useState(false);
    const connect = () => {
        setConnecting(true);
    };
    const activateConnector = async (c) => {
        localStorage.setItem('rk-last-wallet', c.connectorName || c.name);
        await connectToWallet(c.connectorName || c.name);
        return setConnecting(false);
    };
    const disconnect = () => {
        localStorage.removeItem('rk-last-wallet');
        deactivate();
    };
    if (typeof ModalComponent === 'undefined') {
        const Modal$1 = () => React.createElement(Modal, { connect: activateConnector, ...{ wallets, isConnecting, setConnecting, terms } });
        return { Modal: Modal$1, state: { isConnected, isConnecting, connect, disconnect }, provider, address, ...web3ReactProps };
    }
    else {
        return { state: { connect, disconnect, isConnected, isConnecting }, provider, address, ...web3ReactProps };
    }
};

export { Modal, useWalletModal };
